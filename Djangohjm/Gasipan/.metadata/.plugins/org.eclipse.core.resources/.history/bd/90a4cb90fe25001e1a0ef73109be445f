import os,math
from urllib.parse import quote as urlquote  
from django.http.response import HttpResponse
from django.shortcuts import render, redirect
from django.views.decorators.csrf import csrf_exempt
from board.models import Board, Comment
from django.db.models import Q

# Create your views here.
UPLOAD_DIR='c:/hjm/upload'


def register(request):
    return render(request,'board/register.html')

@csrf_exempt
def insert(request):
    fname=''
    fsize=0
    
    if 'file' in request.FILES:
        file=request.FILES['file']
        fname=file.name
        fsize=file.size
        
        fp=open("%s%s"%(UPLOAD_DIR, fname),'wb')
        for chunk in file.chunks():
            fp.write(chunk)
        fp.close()
        
    t=request.POST['title']
    w=request.POST['writer']
    c=request.POST['content']
    dto=Board(title=t, writer=w, content=c, filename=fname, filesize=fsize)
    dto.save()
    return redirect('/list/')

def list(request):
    try:
        search_option=request.POST['search_option']
    except:
        search_option=''
        
    try:
        search=request.POST['search']
    except:
        search=''
        
    if search_option=='all':
        boardCount=Board.objects.filter(Q(writer__contains=search)      #이 검색어가 writer에 포함되어있는 것
                                        | Q(title__contains=search)
                                        | Q(content__contains=search)).count()         #order_by('-bno')     
    elif search_option=='writer':
        boardCount=Board.objects.filter(Q(writer__contains=search)).count()
    elif search_option=='title':
        boardCount=Board.objects.filter(Q(title__contains=search)).count()
    elif search_option=='content':
        boardCount=Board.objects.filter(Q(content__contains=search)).count()
    else:
        boardCount=Board.objects.all().count()
        
    try:
        start=int(request.GET['start'])     #페이지의 첫번쨰 데이터
    except:
        start=0
        
    page_size=5
    block_size=5
    end=start+page_size     # ex) 1page: start=0, end=5 [start:end]
    
    total_page=math.ceil(boardCount/page_size)
    current_page=math.ceil((start+1)/page_size)
    start_page=math.floor((current_page-1)/block_size)*block_size+1
                                        
def list1(request):
    boardCount=Board.objects.all().count()
    boardList=Board.objects.all().order_by("-bno")
    return render(request, 'board/list.html',{"boardList": boardList, "boardCount":boardCount})

def detail(request):
    no=request.GET['bno']
    dto=Board.objects.get(bno=no)
    dto.hit_up()
    dto.save()
    commentList=Comment.objects.filter(bno=no).order_by("-cno")
    
    filesize="%.2f"%(dto.filesize/1024)
    return render(request, 'board/detail.html',
                 {'dto':dto,'filesize':filesize, 'commentList':commentList})

@csrf_exempt
def reply_insert(request):
    no=request.POST['bno']
    dto=Comment(bno=no,
                writer=request.POST['writer'],
                content=request.POST['content'])
    dto.save()
    return redirect('/detail?bno='+no)

@csrf_exempt
def update(request):
    no=request.POST['bno']
    dto_src=Board.objects.get(bno=no)
    fname=dto_src.filename
    fsize=dto_src.filesize

    if 'file' in request.FILES:
        file=request.FILES['file']
        fname=file.name
        fsize=file.size
        fp=open('%s%s'%(UPLOAD_DIR,fname),'wb')
        for chunk in file.chunks():
            fp.write(chunk)
        fp.close()
    
    dto_new=Board(bno=no,
                  writer=request.POST['writer'],
                  title=request.POST['title'],
                  content=request.POST['content'],
                  hit=dto_src.hit,
                  down=dto_src.down,
                  filename=fname,
                  filesize=fsize)
    dto_new.save()
    return redirect("/list/")


@csrf_exempt
def delete(request):
    no=request.POST['bno']
    Board.objects.get(bno=no).delete()
    return redirect("/list/")

def download(request):
    no=request.GET['bno']
    dto=Board.objects.get(bno=no)
    path=UPLOAD_DIR+dto.filename
    filename=os.path.basename(path)
    filename=urlquote(filename)
    with open(path,'rb') as file:
        response=HttpResponse(file.read(), content_type='application/actet-stream')
        response['Content-Disposition']="attachment;filename*=UTF-8''{0}".format(filename)
        
    dto.down_up()
    dto.save()
    return response